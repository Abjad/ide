import abjad
import ide
abjad_ide = ide.AbjadIDE(test=True)


def test_AbjadIDE_show_help_01():
    """
    In _assets directory.
    """

    abjad_ide('red bb _assets ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : builds : _assets (empty) : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_02():
    """
    In _segments directory.
    """

    abjad_ide('red %letter _segments ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : builds : letter-score : _segments (empty) : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    back-cover.pdf - open (bcpo)',
        '    back-cover.pdf - trash (bcpt)',
        '    back-cover.tex - edit (bcte)',
        '    back-cover.tex - generate (bctg)',
        '    back-cover.tex - interpret (bcti)',
        '    back-cover.tex - trash (bctt)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    front-cover.pdf - open (fcpo)',
        '    front-cover.pdf - trash (fcpt)',
        '    front-cover.tex - edit (fcte)',
        '    front-cover.tex - generate (fctg)',
        '    front-cover.tex - interpret (fcti)',
        '    front-cover.tex - trash (fctt)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    .log - edit (le)',
        '',
        '    layout.ly - edit (lle)',
        '    layout.ly - make (llm)',
        '    layout.ly - trash (llt)',
        '    layout.py - edit (lpe)',
        '    layout.py - generate (lpg)',
        '    layout.py - trash (lpt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    music.ly - edit (mle)',
        '    music.ly - generate (mlg)',
        '    music.ly - interpret (mli)',
        '    music.ly - trash (mlt)',
        '    music.ly - xinterpret (mlx)',
        '    music.pdf - open (mpo)',
        '    music.pdf - trash (mpt)',
        '',
        '    clock time markup - hide (ctmh)',
        '    clock time markup - show (ctms)',
        '    figure name markup - hide (fnmh)',
        '    figure name markup - show (fnms)',
        '    local measure index markup - hide (lmimh)',
        '    local measure index markup - show (lmims)',
        '    local measure number markup - hide (lmnmh)',
        '    local measure number markup - show (lmnms)',
        '    measure number markup - hide (mnmh)',
        '    measure number markup - show (mnms)',
        '    music annotations - hide (mah)',
        '    music annotations - show (mas)',
        '    spacing markup - hide (spmh)',
        '    spacing markup - show (spms)',
        '    stage number markup - hide (snmh)',
        '    stage number markup - show (snms)',
        '    tag - hide (th)',
        '    tag - show (ts)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    clefs - color (ccl)',
        '    clefs - uncolor (cuc)',
        '    dynamics - color (dcl)',
        '    dynamics - uncolor (duc)',
        '    instruments - color (icl)',
        '    instruments - uncolor (iuc)',
        '    margin markup - color (mmcl)',
        '    margin markup - uncolor (mmuc)',
        '    metronome marks - color (tmcl)',
        '    metronome marks - uncolor (tmuc)',
        '    persistent indicators - color (picl)',
        '    persistent indicators - uncolor (piuc)',
        '    staff lines - color (slcl)',
        '    staff lines - uncolor (sluc)',
        '    time signatures - color (tscl)',
        '    time signatures - uncolor (tsuc)',
        '',
        '    preface.pdf - open (pfpo)',
        '    preface.pdf - trash (pfpt)',
        '    preface.tex - edit (pfte)',
        '    preface.tex - generate (pftg)',
        '    preface.tex - interpret (pfti)',
        '    preface.tex - trash (pftt)',
        '',
        '    score.pdf - build (spb)',
        '    score.pdf - open (spo)',
        '    score.pdf - trash (spt)',
        '    score.tex - edit (ste)',
        '    score.tex - generate (stg)',
        '    score.tex - interpret (sti)',
        '    score.tex - trash (stt)',
        '',
        '    segments - collect (ggc)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    stylesheet.ily - edit (ssie)',
        '    stylesheet.ily - generate (ssig)',
        '    stylesheet.ily - trash (ssit)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_03():
    """
    In build directory.
    """

    abjad_ide('red %letter ? q')
    menu = abjad_ide.io.transcript.menus[-1]

    assert menu == [
        'Red Score (2017) : builds : letter-score : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    back-cover.pdf - open (bcpo)',
        '    back-cover.pdf - trash (bcpt)',
        '    back-cover.tex - edit (bcte)',
        '    back-cover.tex - generate (bctg)',
        '    back-cover.tex - interpret (bcti)',
        '    back-cover.tex - trash (bctt)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    front-cover.pdf - open (fcpo)',
        '    front-cover.pdf - trash (fcpt)',
        '    front-cover.tex - edit (fcte)',
        '    front-cover.tex - generate (fctg)',
        '    front-cover.tex - interpret (fcti)',
        '    front-cover.tex - trash (fctt)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    .log - edit (le)',
        '',
        '    layout.ly - edit (lle)',
        '    layout.ly - make (llm)',
        '    layout.ly - trash (llt)',
        '    layout.py - edit (lpe)',
        '    layout.py - generate (lpg)',
        '    layout.py - trash (lpt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    music.ly - edit (mle)',
        '    music.ly - generate (mlg)',
        '    music.ly - interpret (mli)',
        '    music.ly - trash (mlt)',
        '    music.ly - xinterpret (mlx)',
        '    music.pdf - open (mpo)',
        '    music.pdf - trash (mpt)',
        '',
        '    clock time markup - hide (ctmh)',
        '    clock time markup - show (ctms)',
        '    figure name markup - hide (fnmh)',
        '    figure name markup - show (fnms)',
        '    local measure index markup - hide (lmimh)',
        '    local measure index markup - show (lmims)',
        '    local measure number markup - hide (lmnmh)',
        '    local measure number markup - show (lmnms)',
        '    measure number markup - hide (mnmh)',
        '    measure number markup - show (mnms)',
        '    music annotations - hide (mah)',
        '    music annotations - show (mas)',
        '    spacing markup - hide (spmh)',
        '    spacing markup - show (spms)',
        '    stage number markup - hide (snmh)',
        '    stage number markup - show (snms)',
        '    tag - hide (th)',
        '    tag - show (ts)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    clefs - color (ccl)',
        '    clefs - uncolor (cuc)',
        '    dynamics - color (dcl)',
        '    dynamics - uncolor (duc)',
        '    instruments - color (icl)',
        '    instruments - uncolor (iuc)',
        '    margin markup - color (mmcl)',
        '    margin markup - uncolor (mmuc)',
        '    metronome marks - color (tmcl)',
        '    metronome marks - uncolor (tmuc)',
        '    persistent indicators - color (picl)',
        '    persistent indicators - uncolor (piuc)',
        '    staff lines - color (slcl)',
        '    staff lines - uncolor (sluc)',
        '    time signatures - color (tscl)',
        '    time signatures - uncolor (tsuc)',
        '',
        '    preface.pdf - open (pfpo)',
        '    preface.pdf - trash (pfpt)',
        '    preface.tex - edit (pfte)',
        '    preface.tex - generate (pftg)',
        '    preface.tex - interpret (pfti)',
        '    preface.tex - trash (pftt)',
        '',
        '    score.pdf - build (spb)',
        '    score.pdf - open (spo)',
        '    score.pdf - trash (spt)',
        '    score.tex - edit (ste)',
        '    score.tex - generate (stg)',
        '    score.tex - interpret (sti)',
        '    score.tex - trash (stt)',
        '',
        '    segments - collect (ggc)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    stylesheet.ily - edit (ssie)',
        '    stylesheet.ily - generate (ssig)',
        '    stylesheet.ily - trash (ssit)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_04():
    """
    In builds directory.
    """

    abjad_ide('red bb ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : builds : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    .log - edit (le)',
        '',
        '    layout.ly - edit (lle)',
        '    layout.ly - make (llm)',
        '    layout.ly - trash (llt)',
        '    layout.py - edit (lpe)',
        '    layout.py - generate (lpg)',
        '    layout.py - trash (lpt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    clock time markup - hide (ctmh)',
        '    clock time markup - show (ctms)',
        '    figure name markup - hide (fnmh)',
        '    figure name markup - show (fnms)',
        '    local measure index markup - hide (lmimh)',
        '    local measure index markup - show (lmims)',
        '    local measure number markup - hide (lmnmh)',
        '    local measure number markup - show (lmnms)',
        '    measure number markup - hide (mnmh)',
        '    measure number markup - show (mnms)',
        '    music annotations - hide (mah)',
        '    music annotations - show (mas)',
        '    spacing markup - hide (spmh)',
        '    spacing markup - show (spms)',
        '    stage number markup - hide (snmh)',
        '    stage number markup - show (snms)',
        '    tag - hide (th)',
        '    tag - show (ts)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    clefs - color (ccl)',
        '    clefs - uncolor (cuc)',
        '    dynamics - color (dcl)',
        '    dynamics - uncolor (duc)',
        '    instruments - color (icl)',
        '    instruments - uncolor (iuc)',
        '    margin markup - color (mmcl)',
        '    margin markup - uncolor (mmuc)',
        '    metronome marks - color (tmcl)',
        '    metronome marks - uncolor (tmuc)',
        '    persistent indicators - color (picl)',
        '    persistent indicators - uncolor (piuc)',
        '    staff lines - color (slcl)',
        '    staff lines - uncolor (sluc)',
        '    time signatures - color (tscl)',
        '    time signatures - uncolor (tsuc)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_05():
    """
    In contents directory.
    """

    abjad_ide('red ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_06():
    """
    In distribution directory.
    """

    abjad_ide('red dd ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : distribution : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_07():
    r"""
    In library.
    """

    if not abjad_ide.test_baca_directories():
        return

    abjad_ide('ll ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Abjad IDE : library : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_08():
    """
    In material directory.
    """

    abjad_ide('red %rpc ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : materials : red_pitch_classes : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    definition.py - check (dpc)',
        '    definition.py - edit (dpe)',
        '    definition.py - trash (dpt)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next package (>)',
        '    hop - next score (>>)',
        '    hop - previous package (<)',
        '    hop - previous score (<<)',
        '',
        '    .log - edit (le)',
        '    .optimization - edit (oe)',
        '    illustration.ily - edit (iie)',
        '    illustration.ily - trash (iit)',
        '    illustration.ly - edit (ile)',
        '    illustration.ly - interpret (ili)',
        '    illustration.ly - make (ilm)',
        '    illustration.ly - trash (ilt)',
        '    illustration.pdf - make (ipm)',
        '    illustration.pdf - nake (ipn)',
        '    illustration.pdf - open (ipo)',
        '    illustration.pdf - trash (ipt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_09():
    r"""
    In materials directory.
    """

    abjad_ide('red mm ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : materials : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    definition.py - check (dpc)',
        '    definition.py - edit (dpe)',
        '    definition.py - trash (dpt)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next package (>)',
        '    hop - next score (>>)',
        '    hop - previous package (<)',
        '    hop - previous score (<<)',
        '',
        '    .log - edit (le)',
        '    .optimization - edit (oe)',
        '    illustration.ily - edit (iie)',
        '    illustration.ily - trash (iit)',
        '    illustration.ly - edit (ile)',
        '    illustration.ly - interpret (ili)',
        '    illustration.ly - make (ilm)',
        '    illustration.ly - trash (ilt)',
        '    illustration.pdf - make (ipm)',
        '    illustration.pdf - nake (ipn)',
        '    illustration.pdf - open (ipo)',
        '    illustration.pdf - trash (ipt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_10():
    """
    In parts directory.
    """

    with ide.Test():

        abjad_ide('gre bb new parts arch-a-parts arch~a ARCH-A y q')
        abjad_ide('gre bb arch-a-parts ? q')

    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Green Score (2018) : builds : arch-a-parts : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    back-cover.pdf - open (bcpo)',
        '    back-cover.pdf - trash (bcpt)',
        '    back-cover.tex - edit (bcte)',
        '    back-cover.tex - generate (bctg)',
        '    back-cover.tex - interpret (bcti)',
        '    back-cover.tex - trash (bctt)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    front-cover.pdf - open (fcpo)',
        '    front-cover.pdf - trash (fcpt)',
        '    front-cover.tex - edit (fcte)',
        '    front-cover.tex - generate (fctg)',
        '    front-cover.tex - interpret (fcti)',
        '    front-cover.tex - trash (fctt)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    .log - edit (le)',
        '',
        '    layout.ly - edit (lle)',
        '    layout.ly - make (llm)',
        '    layout.ly - trash (llt)',
        '    layout.py - edit (lpe)',
        '    layout.py - generate (lpg)',
        '    layout.py - propagate (lpp)',
        '    layout.py - trash (lpt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    music.ly - edit (mle)',
        '    music.ly - generate (mlg)',
        '    music.ly - interpret (mli)',
        '    music.ly - trash (mlt)',
        '    music.ly - xinterpret (mlx)',
        '    music.pdf - open (mpo)',
        '    music.pdf - trash (mpt)',
        '',
        '    clock time markup - hide (ctmh)',
        '    clock time markup - show (ctms)',
        '    figure name markup - hide (fnmh)',
        '    figure name markup - show (fnms)',
        '    local measure index markup - hide (lmimh)',
        '    local measure index markup - show (lmims)',
        '    local measure number markup - hide (lmnmh)',
        '    local measure number markup - show (lmnms)',
        '    measure number markup - hide (mnmh)',
        '    measure number markup - show (mnms)',
        '    music annotations - hide (mah)',
        '    music annotations - show (mas)',
        '    spacing markup - hide (spmh)',
        '    spacing markup - show (spms)',
        '    stage number markup - hide (snmh)',
        '    stage number markup - show (snms)',
        '    tag - hide (th)',
        '    tag - show (ts)',
        '',
        '    part.pdf - build (ppb)',
        '    part.pdf - open (ppo)',
        '    part.pdf - trash (ppt)',
        '    part.tex - edit (pte)',
        '    part.tex - generate (ptg)',
        '    part.tex - interpret (pti)',
        '    part.tex - trash (ptt)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    clefs - color (ccl)',
        '    clefs - uncolor (cuc)',
        '    dynamics - color (dcl)',
        '    dynamics - uncolor (duc)',
        '    instruments - color (icl)',
        '    instruments - uncolor (iuc)',
        '    margin markup - color (mmcl)',
        '    margin markup - uncolor (mmuc)',
        '    metronome marks - color (tmcl)',
        '    metronome marks - uncolor (tmuc)',
        '    persistent indicators - color (picl)',
        '    persistent indicators - uncolor (piuc)',
        '    staff lines - color (slcl)',
        '    staff lines - uncolor (sluc)',
        '    time signatures - color (tscl)',
        '    time signatures - uncolor (tsuc)',
        '',
        '    preface.pdf - open (pfpo)',
        '    preface.pdf - trash (pfpt)',
        '    preface.tex - edit (pfte)',
        '    preface.tex - generate (pftg)',
        '    preface.tex - interpret (pfti)',
        '    preface.tex - trash (pftt)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    segments - collect (ggc)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    stylesheet.ily - edit (ssie)',
        '    stylesheet.ily - generate (ssig)',
        '    stylesheet.ily - trash (ssit)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_11():
    """
    In scores directory.
    """

    abjad_ide('? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Abjad IDE : scores : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_12():
    """
    In segment directory.
    """

    abjad_ide('red %A ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : segments : A : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    definition.py - check (dpc)',
        '    definition.py - edit (dpe)',
        '    definition.py - trash (dpt)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next package (>)',
        '    hop - next score (>>)',
        '    hop - previous package (<)',
        '    hop - previous score (<<)',
        '',
        '    .log - edit (le)',
        '    .optimization - edit (oe)',
        '    illustration.ily - edit (iie)',
        '    illustration.ily - trash (iit)',
        '    illustration.ly - edit (ile)',
        '    illustration.ly - interpret (ili)',
        '    illustration.ly - make (ilm)',
        '    illustration.ly - trash (ilt)',
        '    illustration.pdf - make (ipm)',
        '    illustration.pdf - nake (ipn)',
        '    illustration.pdf - open (ipo)',
        '    illustration.pdf - trash (ipt)',
        '',
        '    layout.ly - edit (lle)',
        '    layout.ly - make (llm)',
        '    layout.ly - trash (llt)',
        '    layout.py - edit (lpe)',
        '    layout.py - generate (lpg)',
        '    layout.py - trash (lpt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    clock time markup - hide (ctmh)',
        '    clock time markup - show (ctms)',
        '    figure name markup - hide (fnmh)',
        '    figure name markup - show (fnms)',
        '    local measure index markup - hide (lmimh)',
        '    local measure index markup - show (lmims)',
        '    local measure number markup - hide (lmnmh)',
        '    local measure number markup - show (lmnms)',
        '    measure number markup - hide (mnmh)',
        '    measure number markup - show (mnms)',
        '    music annotations - hide (mah)',
        '    music annotations - show (mas)',
        '    spacing markup - hide (spmh)',
        '    spacing markup - show (spms)',
        '    stage number markup - hide (snmh)',
        '    stage number markup - show (snms)',
        '    tag - hide (th)',
        '    tag - show (ts)',
        '',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    clefs - color (ccl)',
        '    clefs - uncolor (cuc)',
        '    dynamics - color (dcl)',
        '    dynamics - uncolor (duc)',
        '    instruments - color (icl)',
        '    instruments - uncolor (iuc)',
        '    margin markup - color (mmcl)',
        '    margin markup - uncolor (mmuc)',
        '    metronome marks - color (tmcl)',
        '    metronome marks - uncolor (tmuc)',
        '    persistent indicators - color (picl)',
        '    persistent indicators - uncolor (piuc)',
        '    staff lines - color (slcl)',
        '    staff lines - uncolor (sluc)',
        '    time signatures - color (tscl)',
        '    time signatures - uncolor (tsuc)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    segment.midi - make (midm)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_13():
    """
    In segments directory.
    """

    abjad_ide('red gg ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : segments : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    definition.py - check (dpc)',
        '    definition.py - edit (dpe)',
        '    definition.py - trash (dpt)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next package (>)',
        '    hop - next score (>>)',
        '    hop - previous package (<)',
        '    hop - previous score (<<)',
        '',
        '    .log - edit (le)',
        '    .optimization - edit (oe)',
        '    illustration.ily - edit (iie)',
        '    illustration.ily - trash (iit)',
        '    illustration.ly - edit (ile)',
        '    illustration.ly - interpret (ili)',
        '    illustration.ly - make (ilm)',
        '    illustration.ly - trash (ilt)',
        '    illustration.pdf - make (ipm)',
        '    illustration.pdf - nake (ipn)',
        '    illustration.pdf - open (ipo)',
        '    illustration.pdf - trash (ipt)',
        '',
        '    layout.ly - edit (lle)',
        '    layout.ly - make (llm)',
        '    layout.ly - trash (llt)',
        '    layout.py - edit (lpe)',
        '    layout.py - generate (lpg)',
        '    layout.py - trash (lpt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    clock time markup - hide (ctmh)',
        '    clock time markup - show (ctms)',
        '    figure name markup - hide (fnmh)',
        '    figure name markup - show (fnms)',
        '    local measure index markup - hide (lmimh)',
        '    local measure index markup - show (lmims)',
        '    local measure number markup - hide (lmnmh)',
        '    local measure number markup - show (lmnms)',
        '    measure number markup - hide (mnmh)',
        '    measure number markup - show (mnms)',
        '    music annotations - hide (mah)',
        '    music annotations - show (mas)',
        '    spacing markup - hide (spmh)',
        '    spacing markup - show (spms)',
        '    stage number markup - hide (snmh)',
        '    stage number markup - show (snms)',
        '    tag - hide (th)',
        '    tag - show (ts)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    clefs - color (ccl)',
        '    clefs - uncolor (cuc)',
        '    dynamics - color (dcl)',
        '    dynamics - uncolor (duc)',
        '    instruments - color (icl)',
        '    instruments - uncolor (iuc)',
        '    margin markup - color (mmcl)',
        '    margin markup - uncolor (mmuc)',
        '    metronome marks - color (tmcl)',
        '    metronome marks - uncolor (tmuc)',
        '    persistent indicators - color (picl)',
        '    persistent indicators - uncolor (piuc)',
        '    staff lines - color (slcl)',
        '    staff lines - uncolor (sluc)',
        '    time signatures - color (tscl)',
        '    time signatures - uncolor (tsuc)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_14():
    """
    In stylesheets directory.
    """

    abjad_ide('red yy ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : stylesheets : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_15():
    """
    In test directory.
    """

    abjad_ide('red tt ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : test : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_16():
    """
    In tools directory.
    """

    abjad_ide('red oo ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : tools : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_17():
    """
    In wrapper directory.
    """

    abjad_ide('red ww ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : wrapper : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (spo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]
