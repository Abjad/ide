1.  Implement 'views - check' (wc).

2.  Implement '__metadata__.py - check' (mdc).

3.  Take another pass at (ck) and (ck*) messaging.

4.  Audit (hh).

5.  Audit all star commands.

6.  Audit material interface by hand.
    Audit segment interface by hand.

7.  Audit all public methods for py.test files.

8.  Extended ControllerContext with directory=None keyword.
    This will allow ControllerContext to act like TemporaryDirectoryChange.
    This will then remove some TemporaryDirectoryChange in _run() methods.

9.  Sort the asset sections in (mm), (kk) etc according to the same order
    as used in (hh).

10. Write in-library and in-score material breadcrumb tests.

11. Implement something to make sure _command_to_method contains
    neither duplicate commands nor duplicate methods.

12. Add one blank line between output chunks in iterative commands.

13. Add (*) suffix to changed assets in asset menu.
    Something like ...
        1: magic numbers
        2: performer inventory (*)
        3: pitch range inventory (*)
        4: tempo inventory (*)
        5: time signatures
    ... will make clear that three packages have changed.

14. Fix zagged pitch-class illustration to remove LilyPond warnings like ...
        illustration.ly:89:75: warning: conflicting note group events
    ... and related.
    Make a test zagged pitch class material package and illustrate to test.

15. Implement something to allow the editing of text files in any
    score's etc/ directory. Probably EtcFileWrangler.

16. Make (b) work correctly while in score setup menu.

17. Implement three-column (??) layout.

18. Add something at menu-build time to ensure commands contain no capital
    letters.

19. Make (score > g > ren > a) work. Right now it raises an exception
    when there is a segment named simply 'a'.

20. Add output of Unix 'date' to top of LilyPond log on each run.
    This will allow (ll) to show when LilyPond was last run.

21. Add Unicode directive to top of all new maker files after calling (new).

22. Implement (rci+) to drop the composer into a text editor.
    This will enable commit messages longer than a single line.

23. Redefine math operations on Division.
    Should return Division objects where appropriate.
    Compare with NonreducedFraction.

24. Group materials by `output_material_class_name`.

25. Add segment 'definition.py - write .ly' (dy) command.
    The command will do the first half of what 
    'definition.py - illustrate' (di) already does: read definition.py
    and write illustration.ly. The use case for the command is minor: 
    to create an illustration.ly (that presumably would be different than
    the existing illustration.ly) and then allow for inspection of the
    illustration.ly file. Composers will use the command only when (di) won't
    do the trick. Why wouldn't (di) do the trick? Because the two
    illustration.ly files might result in the same resulting PDF, in which
    case candidacy rules will prevent any new files from being written.
    On reflection, maybe some type of suffix to (di) might be cleanest.
    Something like (di@) or the like.

26. Change (di!) and other bang-suffixed commands to push errors to
    terminal (even though the bang means that confirmation is suppressed).
    Basically the principle is to never suppress errors.

27. Change segment_x/illustration.ly to segment_x/score_name.ly.
    Change segment_x/illustration.pdf to segment_x/score_name.pdf. 
    So ...
        segment_b/red_example_score_B.ly
        segment_b/red_example_score_B.pdf
    ... will be the result.

28. Implement '-' to return to last screen. In emulation of shell.

29. Implement (q!) to quit the IDE and then automatically clear terminal.

30. Allow A, B, C, ... as shortcuts for (g A), (g B), (g C), ....

31. Optimize segment menu:
    OLD:
        Score (2014) - segments directory - B
        
           1: __init__.py
           2: __metadata__.py
           3: definition.py
           4: illustration.ly
           5: illustration.pdf
           6: versions/
        
              definition.py - edit (de)
              definition.py - illustrate (di)
              definition.py - stub (ds)
        
              illustration.ly - edit (ie)
              illustration.ly - interpret (ii)
              illustration.pdf - open (io)
    NEW:
        Score (2014) - segments directory - B
        
           1: __init__.py
           2: __metadata__.py
           3: definition.py
           4: illustration.ly
           5: illustration.pdf
           6: versions/
        
              definition.py - edit (de)
              definition.py - illustrate (di)
              illustration.pdf - open (io)
    Will involve a few extensions to the menuing system.

32. Add a new 'definition.py - copy' (dcp) command.
    This will allow the composer to be in segment A and copy the
    definition.py file from segment B (all in the same score).
    Convenience function.

33. Allow strings of three characters or more (like 'tempo',
    'perf', 'time') to go to any matching material package automatically.
    Allow this from anywhere in a score package. So these will effectively
    be aliases for (m tempo), (m perf), (m time) and so on.
    In general the principle is that nouns (like materials and segments)
    should be identifiable without a prefix like (m) or (g) whereas
    verbs like (di) and (io) probably should require a prefix to
    disambiguate the runtime context.

34. Change (di) to (i). Change (oi) to (i).
    Find a way to structure the menuing system so this is clear.

35. Print Abjad and LilyPond timings to terminal if greater than threshold.

36. Investigate AppleScript to see if there's a way to find out which
    file Preview has open at any given time. Then extend the IDE
    IOManager.open() method to continually redisplay the same file
    when rerendering it with (di) (instead of reopening multiple
    Preview pointers to the same file).

37. Do something to allow measure numbers to come out correctly between
    segments even when just building a draft (as opposed to the full score).

38. Set build/score.ly template to tab width of 4 spaces instead of 3.

39. Add build command to copy score.pdf to distribution directory.

40. Extend ScoreManager main menu.
    Include 'package - setup' (p) in main menu when score has just
    been created but not yet set up.
    The interface will then nudge the composer to first steps.

41. Make sure all tests pass when custom view is applied to score menu.
    These three tests currently fail:
    FAIL test_ScorePackageWrangler__list_visible_asset_paths_01
    FAIL test_ScorePackageWrangler__make_main_menu_01
    FAIL test_ScorePackageWrangler_make_package_02

42. Fix build depot copy bug.
    (uu cp 60 traiettorie) causes this problem:
        > traiett
        Existing file name> preface.tex
        New file name]> preface.tex
        Already exists: /Users/trevorbaca/Documents/scores/tack/build/preface.tex
        Press any key to continue. 
    The composer requests "traiettorie" but the build file wrangler finds
    "tack".

43. Make sure (k > ren) does not allow renaming to clobber an existing maker
    file.

44. Make the following not raise an AttributeError:
    (g > B > di!@ io).

45. Document important gotcha about music.ly files:
        \context Score = "Score" {
            \include "segment-a.ly"
            \include "segment-b.ly"
            \include "segment-c.ly"
        }
    This is fine. The gotcha lies in the structure of the segment files.
    This does not work:
        \score {
            \context Score = "Score" <<
                \new PianoStaff <<
                    ...
                >>
            >>
        }
    But this does work:
        \score {
            \context Score = "Score" <<
                \context PianoStaff = "Piano Staff" <<
                    ...
                >>
            >>
        }
    Not sure how to best articulate the difference. But what matters is that
    segment files must *NOT* start any contexts with the LilyPond \new command.

46. Integrate new score package structrue in (new) command.
    Integrate new score package structure everywhere in system.

47. Figure out why (gg cp 22 al-kitab) incorrectly thinks that the
    target score is ins wasser instead of khamr.

48. Find out if there's a way to pipe the colored output from Git.

49. Add Controller._get_segment_metadata_dictionaries() static method.
    The method will take a segment package name. The method will return
    the metadata dictionary for that segment. The method will also return
    the metadata dictionary for the previous segment. This will make
    parameterized segment tests able to test metadata dictionary retrieval.

50. Make repository commands (especially (rst - repository status)) 
    available everywhere. Remove Subversion support first.
    
51. Fix (k > rm) in Git score packages:
    > rm
    Enter makers(s) to remove]> musichan
    Will remove /Users/trevorbaca/Documents/scores/krummzeit/krummzeit/makers/MusicHandler.py
    Type 'remove' to proceed]> remove

    Traceback (most recent call last):
    File "/Users/trevorbaca/Documents/ide/ide/scr/start-abjad-ide", line 4, in <module>
        ide.idetools.start_abjad_ide()
    File "/Users/trevorbaca/Documents/ide/ide/idetools/start_abjad_ide.py", line 13, in start_abjad_ide
        abjad_ide._run(input_=input_)
    File "/Users/trevorbaca/Documents/ide/ide/idetools/AbjadIDE.py", line 218, in _run
        self._score_package_wrangler._run()
    File "/Users/trevorbaca/Documents/ide/ide/idetools/Wrangler.py", line 812, in _run
        self._handle_input(result)
    File "/Users/trevorbaca/Documents/ide/ide/idetools/AssetController.py", line 244, in _handle_input
        self._handle_numeric_user_input(result)
    File "/Users/trevorbaca/Documents/ide/ide/idetools/ScorePackageWrangler.py", line 192, in _handle_numeric_user_input
        manager._run()
    File "/Users/trevorbaca/Documents/ide/ide/idetools/PackageManager.py", line 774, in _run
        self._handle_input(result)
    File "/Users/trevorbaca/Documents/ide/ide/idetools/AssetController.py", line 237, in _handle_input
        self._command_to_method[result]()
    File "/Users/trevorbaca/Documents/ide/ide/idetools/AssetController.py", line 759, in go_to_score_maker_files
        self._session._abjad_ide._maker_file_wrangler._run()
    File "/Users/trevorbaca/Documents/ide/ide/idetools/Wrangler.py", line 812, in _run
        self._handle_input(result)
    File "/Users/trevorbaca/Documents/ide/ide/idetools/AssetController.py", line 237, in _handle_input
        self._command_to_method[result]()
    File "/Users/trevorbaca/Documents/ide/ide/idetools/FileWrangler.py", line 147, in remove_files
        self._remove_assets()
    File "/Users/trevorbaca/Documents/ide/ide/idetools/Wrangler.py", line 764, in _remove_assets
        manager._remove()
    File "/Users/trevorbaca/Documents/ide/ide/idetools/PackageManager.py", line 661, in _remove
        with systemtools.TemporaryDirectoryChange(directory=self._path):
    File "/Users/trevorbaca/Documents/abjad/abjad/tools/systemtools/TemporaryDirectoryChange.py", line 29, in __enter__
        os.chdir(self.directory)
    OSError: [Errno 2] No such file or directory: '/Users/trevorbaca/Documents/scores/krummzeit/krummzeit/makers/MusicHandler.py'