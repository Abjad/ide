Note that as of r9,872 it takes only 181 function calls to initialize 
the Abjad IDE ...

    >>> argument = 'abjad_ide = ide.AbjadIDE(is_test=True)'
    >>> abjad.IOManager.profile(argument)
    181 function calls in 0.000 seconds

... but that it takes 819,997 function calls to start and immediately quit 
the Abjad IDE a first time and then significantly fewer function calls 
on successive tests:

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    819997 function calls (819894 primitive calls) in 0.734 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    241391 function calls in 0.220 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    241391 function calls in 0.220 seconds

CONCLUSION: don't know what's going on here but it's clear that the score
manager takes quite a few unnecessary steps on start-up. AbjadIDE start up
should be as simple as listing the names of all scores in the system, possibly
with the additional work of inspecting each score package metadatum file for
date of composition. All of that should take far fewer than 820,000 function
calls. Optimizing Abjad IDE start up should save as much as 0.7 seconds on each
Abjad IDE-initiated test.

OBSERVATION: Note that the following ...

    def make_score_selection_menu(self):
        #menu, menu_section = self._io_manager._make_menu(
            where=self._where, numbered=True)
        menu, menu_section = self._io_manager._make_menu(
            where='foo', numbered=True)
        menu_section.menu_entries = \
            self.score_package_wrangler._make_asset_menu_entries()
        return menu

... reduces Abjad IDE start-up from 820,000 function calls to 
153,000 function calls. Removing the call to self._where removes the call 
to inspect.stack(). This was tricky to find because 
abjad.IOManager.profile('inspect.stack()') is lean.
The function must be called inside a complex stack to reveal its true cost.

CONCLUSION: Stack inspection can not be a mandatory part of menu creation
because stack inspection is expensive.


### r10,249 ###

As of r10,249 it takes 6,658 function calls to initialize the Abjad IDE ...

    >>> argument = 'abjad_ide = ide.AbjadIDE(is_test=True)'
    >>> abjad.IOManager.profile(argument)
    6658 function calls (6646 primitive calls) in 0.008 seconds

   Ordered by: cumulative time
   List reduced from 147 to 12 due to restriction <12>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.008    0.008 <string>:1(<module>)
        1    0.000    0.000    0.008    0.008 AbjadIDE.py:11(__init__)
        6    0.000    0.000    0.008    0.001 PackagesystemAssetWrangler.py:8(__init__)
        6    0.000    0.000    0.008    0.001 package_path_to_path.py:4(package_path_to_path)
        6    0.000    0.000    0.007    0.001 Configuration.py:22(__init__)
        6    0.000    0.000    0.007    0.001 Configuration.py:16(__init__)
        2    0.000    0.000    0.003    0.001 MaterialManagerWrangler.py:12(__init__)
        1    0.000    0.000    0.003    0.003 MaterialPackageWrangler.py:37(__init__)
     12/6    0.000    0.000    0.002    0.000 configobj.py:1187(__init__)
     12/6    0.000    0.000    0.002    0.000 configobj.py:1245(_load)
        6    0.000    0.000    0.002    0.000 configobj.py:2116(validate)
       12    0.001    0.000    0.002    0.000 configobj.py:1533(_parse)

... as opposed to the 181 function calls it took in r9,872.

This is most likely due to the integration of Configuration.
This increase from 181 to 6,658 is probably nothing to worry about.

But note that it takes between 325,000 and 323,000 function calls to start 
and then immediately quit the Abjad IDE, totaling ~0.4 seconds on the iMac:

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    325311 function calls (324734 primitive calls) in 0.407 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    323222 function calls (322706 primitive calls) in 0.435 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    323222 function calls (322706 primitive calls) in 0.395 seconds

This represents an increase from 240,000 function calls to 323,000 function
calls (or 0.22 seconds to 0.40 seconds) from r9,872 to r10,249.
The performance of r10,249 is only half as fast as r9,872 at the basic
task of starting the Abjad IDE and then immediately quitting.


### r10,250 ###

Turning on the quick-and-dirty caching code included in r10,250 gives the 
following results:

    >>> argument = 'abjad_ide = ide.AbjadIDE(is_test=True)'
    >>> abjad.IOManager.profile(argument)
    6658 function calls (6646 primitive calls) in 0.008 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    8417 function calls (8382 primitive calls) in 0.009 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    8169 function calls (8157 primitive calls) in 0.009 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    8169 function calls (8157 primitive calls) in 0.009 seconds

CONCLUSION: the quick-and-dirty caching code turned on in r10,250 effectively 
eliminates *all* the effort associated with starting the Abjad IDE. This 
shows that the effort involved in starting the Abjad IDE comes exclusively 
from the call ...
    menu_section.menu_entries = self.score_package_wrangler._make_asset_menu_entries()
... found in the Abjad IDE. The pytest battery runs in 160 seconds on the 
iMac with caching turned off; the pytest battery runs in 94 seconds on the 
iMac with caching turned on.

PROSPECTUS: Should caching become a permament part of the system? There are 
risks associated with caching; these all come from the work necessary to keep 
the cache up to date. Perhaps more to the point is the fact that every rebuild 
of the main menu ...
    menu_section.menu_entries = self.score_package_wrangler._make_asset_menu_entries()
... now costs ~320,000 fuction calls (~0.4 seconds). So whether caching is left
permanently turned on or not, it is clear that ...
    menu_section.menu_entries = self.score_package_wrangler._make_asset_menu_entries()
... must be optimized regardless.
Probably what should happen is that ...
    menu_section.menu_entries = self.score_package_wrangler._make_asset_menu_entries()
... should be optimized and caching should be left permanently turned on. 
Why? Because leaving caching turned on gives almost a 80% speed *when running 
the test battery*. That reason alone is probably enough to leave caching 
turned on.


### r10,251 ###

Revision r10,251 fives an inefficiency in 
package_path_to_path() and the same inefficiency in 
path_to_package(). Specifically, a 
Configuration object was being instantiated for each and every
call to both of these functions; note that there is disk read time incurred 
every time a Configuration object is istantiated.

RESULTS: correcting the inefficiency produces the following results.
Note that all of these results are with caching turned off:

    >>> argument = 'abjad_ide = ide.AbjadIDE(is_test=True)'
    >>> abjad.IOManager.profile(argument)
    760 function calls in 0.001 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    77889 function calls (77828 primitive calls) in 0.097 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    75800 function calls in 0.073 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    75800 function calls in 0.073 seconds

Also, the pytest battery now runs in 46 seconds on the iMac.

CONCLUSION: these are extremely good results. The identified inefficiency was 
the problem.

It is possible that turning caching back on could increase pytest battery 
performance. Such will results will be recorded in a future entry to this ll.


### r10,252 ###

Revision r10,252 turns caching back on.

RESULTS: pytest battery time decreases from 46 seconds to 37 seconds. 
Also these:

    >>> argument = 'abjad_ide = ide.AbjadIDE(is_test=True)'
    >>> abjad.IOManager.profile(argument)
    760 function calls in 0.001 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    2663 function calls (2640 primitive calls) in 0.003 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    2415 function calls in 0.002 seconds

    >>> abjad.IOManager.profile("abjad_ide(input_='q')")
    2415 function calls in 0.002 seconds

CONCLUSION: quick-and-dirty caching saves about 20% of pytest run time for 
abjad_ide. So a reasonable path forward is to leave caching on *during
development* and then turn it off before shipping public releases.


### 2014-03-17 ###

Here are data for running the py.test battery with where-tracking turned off
versus running with where-tracking turned on:

With where-tracking turned off:

    446 passed, 12 skipped in 53.16 seconds
    446 passed, 12 skipped in 52.37 seconds
    446 passed, 12 skipped in 52.20 seconds
    average time: 52.58 seconds

With where-tracking turned on:

    446 passed, 12 skipped in 56.89 seconds
    446 passed, 12 skipped in 55.81 seconds
    446 passed, 12 skipped in 55.69 seconds
    average time: 56.13 seconds

Here are function counts for the same thing:

With where-tracking turned off:

    >>> abjad_ide = ide.AbjadIDE(is_test=True)
    >>> statement = 'abjad_ide._make_main_menu()'
    >>> print abjad_ide._session.io_manager.count_function_calls(
        statement,
        global_context=globals(),
        local_context=locals(),
        )
    2741

With where-tracking turned on:

    >>> abjad_ide = ide.AbjadIDE(is_test=True)
    >>> statement = 'abjad_ide._make_main_menu()'
    >>> print abjad_ide._session.io_manager.count_function_calls(
        statement,
        global_context=globals(),
        local_context=locals(),
        )
    19690

RESULTS: there's about a 6.7% runtime cost to turning where-tracking on.

RESULTS: main menu production goes from ~3000 to ~20,000 function calls with
where-tracking turned on.

CONCLUSION: the extra function calls required to keep where-tracking turned on
result in a runtime overhead of only between 5 - 10%. It actually makes sense
to keep where-tracking turned on all the time. An even smarter approach will
keep where-tracking turned for all nontest sessions and leave where-tracking
turned off for all test sessions.

###############################################################################
##################################### 2017 ####################################
###############################################################################

AUG 23:
    2a6c424: 6.5 sec (git) / 130 sec (all)
    bf4e4b7:   7 sec (git) / 140 sec (all)
    a8fed99:   9 sec (git) / 168 sec (all)
    b044ff6:   9 sec (git) / 174 sec (all)
    6ccd1cc:   9 sec (git) / 166 sec (all) [Configuration cache]
    051bbfb:  16 sec (git) / 250 sec (all)
    00f055c:  16 sec (git) / 260 sec (all)
    b7efc4d:  16 sec (git) / 260 sec (all)
    d082284:  16 sec (git) / 260 sec (all) [OPTIMIZATION BEGINS ...]
    404df16:  23 sec (git) / 300 sec (all) [<== BREAKPOINT]
    ccd4ff9:  20 sec (git) 
    2017988:  20 sec (git)
    45f0628:  20 sec (git)
    2a18400:  20 sec (git)
    012590f:  20 sec (git) [START OF DAY]

AUG 22:
    8c1b85b: 20 sec (git) [END OF DAY]
    183ce8b: 20 sec (git)
    ee43cae: 19.85 sec (git)
    0292e46: 19.85 sec (git) / 300 sec (all) [<== BREAKPOINT]
    9b9b373: 10.7 sec (git) / 186 sec (all)
    4d91b3c: 10.5 sec (git)
    8aa0b8a: 10.5 sec (git)
    4a67b95: 10.5 sec (git)
    fec14f5: 10.5 sec (git)
    f8d8410: 10.5 sec (git)
    ...
    8d77045: 9.75 sec (git) [START OF DAY] [<== BREAKPOINT]

AUG 21:
    48a750c: 6.75 sec (git) [END OF DAY]
    ...

AUG 19:
    50080e2: 6.75 sec (git) [END OF DAY]
    c67a68d: 6.75 sec (git)
    84dc0eba: 6.75 sec (git)  [<== BREAKPOINT]
    15e9fdc: 6 sec (git)
    25d45ed: 6 sec (git)
    94050fc: 6 sec (git) [START OF DAY]

AUG 18:
    a23662f: 6 sec (git) [END OF DAY]
    ...

AUG 17:
    1099705: 6 sec (git) [END OF DAY]
    ...

AUG 16:
    b295a31: 6 sec (git) [END OF DAY]
    ...

AUG 12:
    fab39a6: 6 sec (git) [END OF DAY]
    ...

AUG 9:
    61e46b2: 6 sec (git) / 98 sec [END OF DAY]
    ...

AUG 1:
    8b0340c: 6 sec (git) [END OF DAY]
    ...

###############################################################################
############################### PROFILER OUTPUT ###############################
###############################################################################

404df16: 23 sec (git)

Wed Aug 23 11:48:08 2017

         96272 function calls (96201 primitive calls) in 0.108 seconds

   Ordered by: cumulative time
   List reduced from 280 to 12 due to restriction <12>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      8/1    0.000    0.000    0.108    0.108 {built-in method builtins.exec}
        1    0.000    0.000    0.108    0.108 AbjadIDE.py:2279(_start)
        1    0.000    0.000    0.102    0.102 AbjadIDE.py:1762(_manage_directory)
        1    0.000    0.000    0.073    0.073 AbjadIDE.py:1385(_make_main_menu)
  305/241    0.002    0.000    0.068    0.000 AbjadIDE.py:1044(_is_score_directory)
        1    0.000    0.000    0.057    0.057 AbjadIDE.py:1299(_make_command_menu_sections)
      369    0.002    0.000    0.051    0.000 AbjadIDE.py:2528(_to_scores_directory)
     3465    0.006    0.000    0.038    0.000 pathlib.py:629(_parse_args)
     1987    0.003    0.000    0.032    0.000 pathlib.py:966(__new__)
     3469    0.018    0.000    0.031    0.000 pathlib.py:51(parse_parts)
     1987    0.003    0.000    0.029    0.000 pathlib.py:646(_from_parts)
        1    0.000    0.000    0.028    0.028 Menu.py:513(_run)

######################### _to_scores_directory() redo #########################

16 sec (git) / 254 sec (all) test time with ...

Wed Aug 23 11:55:18 2017

         55697 function calls (55626 primitive calls) in 0.077 seconds

   Ordered by: cumulative time
   List reduced from 280 to 12 due to restriction <12>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      8/1    0.000    0.000    0.077    0.077 {built-in method builtins.exec}
        1    0.000    0.000    0.077    0.077 AbjadIDE.py:2279(_start)
        1    0.000    0.000    0.071    0.071 AbjadIDE.py:1762(_manage_directory)
        1    0.000    0.000    0.045    0.045 AbjadIDE.py:1385(_make_main_menu)
  305/241    0.002    0.000    0.039    0.000 AbjadIDE.py:1044(_is_score_directory)
        1    0.000    0.000    0.030    0.030 AbjadIDE.py:1299(_make_command_menu_sections)
        1    0.000    0.000    0.025    0.025 Menu.py:513(_run)
        2    0.000    0.000    0.024    0.012 Menu.py:494(_redraw)
      369    0.002    0.000    0.022    0.000 AbjadIDE.py:2528(_to_scores_directory)
     1287    0.002    0.000    0.021    0.000 pathlib.py:966(__new__)
     1772    0.003    0.000    0.020    0.000 pathlib.py:629(_parse_args)
     1287    0.002    0.000    0.019    0.000 pathlib.py:646(_from_parts)

################### Configurations property caching ###################

9 sec (git) / 166 sec (all) test time, with profiler output ...

Wed Aug 23 13:11:09 2017

         26247 function calls (26176 primitive calls) in 0.056 seconds

   Ordered by: cumulative time
   List reduced from 279 to 12 due to restriction <12>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      8/1    0.000    0.000    0.056    0.056 {built-in method builtins.exec}
        1    0.000    0.000    0.056    0.056 AbjadIDE.py:2250(_start)
        1    0.000    0.000    0.050    0.050 AbjadIDE.py:1739(_manage_directory)
        1    0.000    0.000    0.027    0.027 Menu.py:513(_run)
        2    0.000    0.000    0.025    0.013 Menu.py:494(_redraw)
        1    0.000    0.000    0.023    0.023 AbjadIDE.py:1366(_make_main_menu)
        3    0.000    0.000    0.018    0.006 IOManager.py:139(clear_terminal)
        3    0.000    0.000    0.017    0.006 IOManager.py:685(spawn_subprocess)
        3    0.001    0.000    0.017    0.006 subprocess.py:239(call)
  305/241    0.002    0.000    0.017    0.000 AbjadIDE.py:1031(_is_score_directory)
        1    0.000    0.000    0.015    0.015 AbjadIDE.py:1282(_make_command_menu_sections)
        2    0.000    0.000    0.011    0.006 Menu.py:288(_make_bicolumnar)

############################## after optimization #############################

6.5 sec (git) / 130 sec (all) test time, with profiler ...

Wed Aug 23 14:36:08 2017

         14890 function calls (14819 primitive calls) in 0.044 seconds

   Ordered by: cumulative time
   List reduced from 276 to 24 due to restriction <24>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      8/1    0.000    0.000    0.044    0.044 {built-in method builtins.exec}
        1    0.000    0.000    0.044    0.044 AbjadIDE.py:2225(_start)
        1    0.000    0.000    0.038    0.038 AbjadIDE.py:1717(_manage_directory)
        1    0.000    0.000    0.027    0.027 Menu.py:513(_run)
        2    0.000    0.000    0.026    0.013 Menu.py:494(_redraw)
        3    0.000    0.000    0.017    0.006 IOManager.py:139(clear_terminal)
        3    0.000    0.000    0.017    0.006 IOManager.py:685(spawn_subprocess)
        3    0.000    0.000    0.017    0.006 subprocess.py:239(call)
        2    0.000    0.000    0.012    0.006 Menu.py:288(_make_bicolumnar)
        6    0.000    0.000    0.011    0.002 subprocess.py:1349(wait)
        1    0.000    0.000    0.010    0.010 AbjadIDE.py:1347(_make_main_menu)
        3    0.000    0.000    0.010    0.003 subprocess.py:1336(_try_wait)
        7    0.010    0.001    0.010    0.001 {built-in method posix.waitpid}
        5    0.001    0.000    0.010    0.002 subprocess.py:563(__init__)
        5    0.001    0.000    0.008    0.002 subprocess.py:1159(_execute_child)
        1    0.000    0.000    0.007    0.007 Menu.py:425(_make_lines)
        1    0.000    0.000    0.007    0.007 Menu.py:275(_make_asset_lines)
        9    0.006    0.001    0.007    0.001 {method 'read' of '_io.TextIOWrapper' objects}
        1    0.000    0.000    0.006    0.006 Menu.py:385(_make_help_lines)
  305/241    0.001    0.000    0.005    0.000 AbjadIDE.py:1015(_is_score_directory)
        1    0.000    0.000    0.005    0.005 AbjadIDE.py:1263(_make_command_menu_sections)
        5    0.005    0.001    0.005    0.001 {built-in method posix.read}
        2    0.001    0.000    0.005    0.002 os.py:1023(popen)
        1    0.000    0.000    0.004    0.004 AbjadIDE.py:1150(_list_visible_paths)
