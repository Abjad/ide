import abjad
import ide
abjad_ide = ide.AbjadIDE(test=True)


def test_AbjadIDE_show_help_01():
    r'''In _assets directory.
    '''

    abjad_ide('red bb _assets ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : builds : _assets : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_02():
    r'''In _segments directory.
    '''

    abjad_ide('red %letter _segments ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : builds : letter-score : _segments : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    back-cover.pdf - open (bcpo)',
        '    back-cover.pdf - trash (bcpt)',
        '    back-cover.tex - edit (bce)',
        '    back-cover.tex - generate (bcg)',
        '    back-cover.tex - interpret (bci)',
        '    back-cover.tex - trash (bct)',
        '',
        '    b&w - CLEFS (bwc)',
        '    b&w - DYNAMICS (bwd)',
        '    b&w - INSTRUMENTS (bwi)',
        '    b&w - MARGIN MARKUP (bwmm)',
        '    b&w - METRONOME MARKS (bwtm)',
        '    b&w - STAFF LINES (bwsl)',
        '    b&w - TIME SIGNATURES (bwts)',
        '    b&w - all persistent indicators (bw*)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    color - CLEFS (clc)',
        '    color - DYNAMICS (cld)',
        '    color - INSTRUMENTS (cli)',
        '    color - MARGIN MARKUP (clmm)',
        '    color - METRONOME MARKS (cltm)',
        '    color - STAFF LINES (clsl)',
        '    color - TIME SIGNATURES (clts)',
        '    color - all persistent indicators (cl*)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    front-cover.pdf - open (fcpo)',
        '    front-cover.pdf - trash (fcpt)',
        '    front-cover.tex - edit (fce)',
        '    front-cover.tex - generate (fcg)',
        '    front-cover.tex - interpret (fci)',
        '    front-cover.tex - trash (fct)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    layout.ly - b&w (ylb)',
        '    layout.ly - color (ylc)',
        '    layout.ly - edit (yle)',
        '    layout.ly - make (ylm)',
        '    layout.ly - trash (ylt)',
        '    layout.py - edit (ype)',
        '    layout.py - generate (ypg)',
        '    layout.py - trash (ypt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    CLOCK_TIME_MARKUP - activate (ctm)',
        '    CLOCK_TIME_MARKUP - deactivate (ctmx)',
        '    FIGURE_NAME_MARKUP - activate (fnm)',
        '    FIGURE_NAME_MARKUP - deactivate (fnmx)',
        '    MEASURE_NUMBER_MARKUP - activate (mnm)',
        '    MEASURE_NUMBER_MARKUP - deactivate (mnmx)',
        '    SPACING_MARKUP - activate (spm)',
        '    SPACING_MARKUP - deactivate (spmx)',
        '    STAGE_NUMBER_MARKUP - activate (snm)',
        '    STAGE_NUMBER_MARKUP - deactivate (snmx)',
        '    all score annotations - activate (ann)',
        '    all score annotations - deactivate (annx)',
        '',
        '    music.ly - edit (me)',
        '    music.ly - generate (mg)',
        '    music.ly - interpret (mi)',
        '    music.ly - trash (mt)',
        '    music.pdf - open (mpo)',
        '    music.pdf - trash (mpt)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    preface.pdf - open (ppo)',
        '    preface.pdf - trash (ppt)',
        '    preface.tex - edit (pe)',
        '    preface.tex - generate (pg)',
        '    preface.tex - interpret (pi)',
        '    preface.tex - trash (pt)',
        '',
        '    score.pdf - build (rpb)',
        '    score.pdf - open (rpo)',
        '    score.pdf - trash (rpt)',
        '    score.tex - edit (re)',
        '    score.tex - generate (rg)',
        '    score.tex - interpret (ri)',
        '    score.tex - trash (rt)',
        '',
        '    segments - collect (ggc)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    stylesheet.ily - edit (ye)',
        '    stylesheet.ily - generate (yg)',
        '    stylesheet.ily - trash (yt)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_03():
    r'''In build directory.
    '''

    abjad_ide('red %letter ? q')
    menu = abjad_ide.io.transcript.menus[-1]

    assert menu == [
        'Red Score (2017) : builds : letter-score : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    back-cover.pdf - open (bcpo)',
        '    back-cover.pdf - trash (bcpt)',
        '    back-cover.tex - edit (bce)',
        '    back-cover.tex - generate (bcg)',
        '    back-cover.tex - interpret (bci)',
        '    back-cover.tex - trash (bct)',
        '',
        '    b&w - CLEFS (bwc)',
        '    b&w - DYNAMICS (bwd)',
        '    b&w - INSTRUMENTS (bwi)',
        '    b&w - MARGIN MARKUP (bwmm)',
        '    b&w - METRONOME MARKS (bwtm)',
        '    b&w - STAFF LINES (bwsl)',
        '    b&w - TIME SIGNATURES (bwts)',
        '    b&w - all persistent indicators (bw*)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    color - CLEFS (clc)',
        '    color - DYNAMICS (cld)',
        '    color - INSTRUMENTS (cli)',
        '    color - MARGIN MARKUP (clmm)',
        '    color - METRONOME MARKS (cltm)',
        '    color - STAFF LINES (clsl)',
        '    color - TIME SIGNATURES (clts)',
        '    color - all persistent indicators (cl*)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    front-cover.pdf - open (fcpo)',
        '    front-cover.pdf - trash (fcpt)',
        '    front-cover.tex - edit (fce)',
        '    front-cover.tex - generate (fcg)',
        '    front-cover.tex - interpret (fci)',
        '    front-cover.tex - trash (fct)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    layout.ly - b&w (ylb)',
        '    layout.ly - color (ylc)',
        '    layout.ly - edit (yle)',
        '    layout.ly - make (ylm)',
        '    layout.ly - trash (ylt)',
        '    layout.py - edit (ype)',
        '    layout.py - generate (ypg)',
        '    layout.py - trash (ypt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    CLOCK_TIME_MARKUP - activate (ctm)',
        '    CLOCK_TIME_MARKUP - deactivate (ctmx)',
        '    FIGURE_NAME_MARKUP - activate (fnm)',
        '    FIGURE_NAME_MARKUP - deactivate (fnmx)',
        '    MEASURE_NUMBER_MARKUP - activate (mnm)',
        '    MEASURE_NUMBER_MARKUP - deactivate (mnmx)',
        '    SPACING_MARKUP - activate (spm)',
        '    SPACING_MARKUP - deactivate (spmx)',
        '    STAGE_NUMBER_MARKUP - activate (snm)',
        '    STAGE_NUMBER_MARKUP - deactivate (snmx)',
        '    all score annotations - activate (ann)',
        '    all score annotations - deactivate (annx)',
        '',
        '    music.ly - edit (me)',
        '    music.ly - generate (mg)',
        '    music.ly - interpret (mi)',
        '    music.ly - trash (mt)',
        '    music.pdf - open (mpo)',
        '    music.pdf - trash (mpt)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    preface.pdf - open (ppo)',
        '    preface.pdf - trash (ppt)',
        '    preface.tex - edit (pe)',
        '    preface.tex - generate (pg)',
        '    preface.tex - interpret (pi)',
        '    preface.tex - trash (pt)',
        '',
        '    score.pdf - build (rpb)',
        '    score.pdf - open (rpo)',
        '    score.pdf - trash (rpt)',
        '    score.tex - edit (re)',
        '    score.tex - generate (rg)',
        '    score.tex - interpret (ri)',
        '    score.tex - trash (rt)',
        '',
        '    segments - collect (ggc)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    stylesheet.ily - edit (ye)',
        '    stylesheet.ily - generate (yg)',
        '    stylesheet.ily - trash (yt)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_04():
    r'''In builds directory.
    '''

    abjad_ide('red bb ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : builds : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    layout.ly - b&w (ylb)',
        '    layout.ly - color (ylc)',
        '    layout.ly - edit (yle)',
        '    layout.ly - make (ylm)',
        '    layout.ly - trash (ylt)',
        '    layout.py - edit (ype)',
        '    layout.py - generate (ypg)',
        '    layout.py - trash (ypt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    parts - new (parts)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_05():
    r'''In contents directory.
    '''

    abjad_ide('red ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_06():
    r'''In distribution directory.
    '''

    abjad_ide('red dd ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : distribution : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_07():
    r'''In library.
    '''

    if not abjad_ide.test_baca_directories():
        return

    abjad_ide('ll ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Abjad IDE : library : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_08():
    r'''In material directory.
    '''

    abjad_ide('red %rpc ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : materials : red_pitch_classes : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    definition.py - check (dpk)',
        '    definition.py - edit (dpe)',
        '    definition.py - trash (dpt)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next package (>)',
        '    hop - next score (>>)',
        '    hop - previous package (<)',
        '    hop - previous score (<<)',
        '',
        '    illustration.ly - edit (ile)',
        '    illustration.ly - interpret (ili)',
        '    illustration.ly - make (ilm)',
        '    illustration.ly - trash (ilt)',
        '    illustration.pdf - make (ipm)',
        '    illustration.pdf - nake (ipn)',
        '    illustration.pdf - open (ipo)',
        '    illustration.pdf - trash (ipt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_09():
    r'''In materials directory.
    '''

    abjad_ide('red mm ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : materials : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    definition.py - check (dpk)',
        '    definition.py - edit (dpe)',
        '    definition.py - trash (dpt)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next package (>)',
        '    hop - next score (>>)',
        '    hop - previous package (<)',
        '    hop - previous score (<<)',
        '',
        '    illustration.ly - edit (ile)',
        '    illustration.ly - interpret (ili)',
        '    illustration.ly - make (ilm)',
        '    illustration.ly - trash (ilt)',
        '    illustration.pdf - make (ipm)',
        '    illustration.pdf - nake (ipn)',
        '    illustration.pdf - open (ipo)',
        '    illustration.pdf - trash (ipt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_10():
    r'''In scores directory.
    '''

    abjad_ide('? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Abjad IDE : scores : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_11():
    r'''In segment directory.
    '''

    abjad_ide('red %A ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : segments : A : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    b&w - CLEFS (bwc)',
        '    b&w - DYNAMICS (bwd)',
        '    b&w - INSTRUMENTS (bwi)',
        '    b&w - MARGIN MARKUP (bwmm)',
        '    b&w - METRONOME MARKS (bwtm)',
        '    b&w - STAFF LINES (bwsl)',
        '    b&w - TIME SIGNATURES (bwts)',
        '    b&w - all persistent indicators (bw*)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    color - CLEFS (clc)',
        '    color - DYNAMICS (cld)',
        '    color - INSTRUMENTS (cli)',
        '    color - MARGIN MARKUP (clmm)',
        '    color - METRONOME MARKS (cltm)',
        '    color - STAFF LINES (clsl)',
        '    color - TIME SIGNATURES (clts)',
        '    color - all persistent indicators (cl*)',
        '',
        '    definition.py - check (dpk)',
        '    definition.py - edit (dpe)',
        '    definition.py - trash (dpt)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next package (>)',
        '    hop - next score (>>)',
        '    hop - previous package (<)',
        '    hop - previous score (<<)',
        '',
        '    illustration.ly - edit (ile)',
        '    illustration.ly - interpret (ili)',
        '    illustration.ly - make (ilm)',
        '    illustration.ly - trash (ilt)',
        '    illustration.pdf - make (ipm)',
        '    illustration.pdf - nake (ipn)',
        '    illustration.pdf - open (ipo)',
        '    illustration.pdf - trash (ipt)',
        '',
        '    layout.ly - b&w (ylb)',
        '    layout.ly - color (ylc)',
        '    layout.ly - edit (yle)',
        '    layout.ly - make (ylm)',
        '    layout.ly - trash (ylt)',
        '    layout.py - edit (ype)',
        '    layout.py - generate (ypg)',
        '    layout.py - trash (ypt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    CLOCK_TIME_MARKUP - activate (ctm)',
        '    CLOCK_TIME_MARKUP - deactivate (ctmx)',
        '    FIGURE_NAME_MARKUP - activate (fnm)',
        '    FIGURE_NAME_MARKUP - deactivate (fnmx)',
        '    MEASURE_NUMBER_MARKUP - activate (mnm)',
        '    MEASURE_NUMBER_MARKUP - deactivate (mnmx)',
        '    SPACING_MARKUP - activate (spm)',
        '    SPACING_MARKUP - deactivate (spmx)',
        '    STAGE_NUMBER_MARKUP - activate (snm)',
        '    STAGE_NUMBER_MARKUP - deactivate (snmx)',
        '    all score annotations - activate (ann)',
        '    all score annotations - deactivate (annx)',
        '',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    segment.midi - make (midm)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_12():
    r'''In segments directory.
    '''

    abjad_ide('red gg ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : segments : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    b&w - CLEFS (bwc)',
        '    b&w - DYNAMICS (bwd)',
        '    b&w - INSTRUMENTS (bwi)',
        '    b&w - MARGIN MARKUP (bwmm)',
        '    b&w - METRONOME MARKS (bwtm)',
        '    b&w - STAFF LINES (bwsl)',
        '    b&w - TIME SIGNATURES (bwts)',
        '    b&w - all persistent indicators (bw*)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    color - CLEFS (clc)',
        '    color - DYNAMICS (cld)',
        '    color - INSTRUMENTS (cli)',
        '    color - MARGIN MARKUP (clmm)',
        '    color - METRONOME MARKS (cltm)',
        '    color - STAFF LINES (clsl)',
        '    color - TIME SIGNATURES (clts)',
        '    color - all persistent indicators (cl*)',
        '',
        '    definition.py - check (dpk)',
        '    definition.py - edit (dpe)',
        '    definition.py - trash (dpt)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next package (>)',
        '    hop - next score (>>)',
        '    hop - previous package (<)',
        '    hop - previous score (<<)',
        '',
        '    illustration.ly - edit (ile)',
        '    illustration.ly - interpret (ili)',
        '    illustration.ly - make (ilm)',
        '    illustration.ly - trash (ilt)',
        '    illustration.pdf - make (ipm)',
        '    illustration.pdf - nake (ipn)',
        '    illustration.pdf - open (ipo)',
        '    illustration.pdf - trash (ipt)',
        '',
        '    layout.ly - b&w (ylb)',
        '    layout.ly - color (ylc)',
        '    layout.ly - edit (yle)',
        '    layout.ly - make (ylm)',
        '    layout.ly - trash (ylt)',
        '    layout.py - edit (ype)',
        '    layout.py - generate (ypg)',
        '    layout.py - trash (ypt)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    CLOCK_TIME_MARKUP - activate (ctm)',
        '    CLOCK_TIME_MARKUP - deactivate (ctmx)',
        '    FIGURE_NAME_MARKUP - activate (fnm)',
        '    FIGURE_NAME_MARKUP - deactivate (fnmx)',
        '    MEASURE_NUMBER_MARKUP - activate (mnm)',
        '    MEASURE_NUMBER_MARKUP - deactivate (mnmx)',
        '    SPACING_MARKUP - activate (spm)',
        '    SPACING_MARKUP - deactivate (spmx)',
        '    STAGE_NUMBER_MARKUP - activate (snm)',
        '    STAGE_NUMBER_MARKUP - deactivate (snmx)',
        '    all score annotations - activate (ann)',
        '    all score annotations - deactivate (annx)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_13():
    r'''In stylesheets directory.
    '''

    abjad_ide('red yy ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : stylesheets : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_14():
    r'''In test directory.
    '''

    abjad_ide('red tt ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : test : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_15():
    r'''In tools directory.
    '''

    abjad_ide('red oo ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : tools : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]


def test_AbjadIDE_show_help_16():
    r'''In wrapper directory.
    '''

    abjad_ide('red ww ? q')
    menu = abjad_ide.io.transcript.menus[-1]
    assert menu == [
        'Red Score (2017) : wrapper : help',
        '',
        '    all - doctest (^^)',
        '    all - edit (@@)',
        '    all - pdfs (**)',
        '    all - pytest (++)',
        '',
        '    clipboard - copy (cbc)',
        '    clipboard - cut (cbx)',
        '    clipboard - empty (cbe)',
        '    clipboard - paste (cbv)',
        '    clipboard - show (cbs)',
        '',
        '    directory - builds (bb)',
        '    directory - contents (cc)',
        '    directory - distribution (dd)',
        '    directory - etc (ee)',
        '    directory - materials (mm)',
        '    directory - segments (gg)',
        '    directory - stylesheets (yy)',
        '    directory - test (tt)',
        '    directory - tools (oo)',
        '    directory - wrapper (ww)',
        '',
        '    git - commit (ci)',
        '    git - diff (diff)',
        '    git - pull (pull)',
        '    git - push (push)',
        '    git - status (st)',
        '',
        '    go - back (-)',
        '    go - directory (%)',
        '    go - library (ll)',
        '    go - quit (q)',
        '    go - scores (ss)',
        '    go - up (..)',
        '',
        '    hop - next score (>>)',
        '    hop - previous score (<<)',
        '',
        '    log - aliases (al)',
        '    log - latex (lx)',
        '    log - lilypond (lp)',
        '',
        '    path - duplicate (dup)',
        '    path - get (get)',
        '    path - new (new)',
        '    path - remove (rm)',
        '    path - rename (ren)',
        '',
        '    score.pdf - open (rpo)',
        '',
        '    shell - call (!)',
        '',
        '    show - column (;)',
        '    show - help (?)',
        '',
        '    smart - doctest (^)',
        '    smart - edit (@)',
        '    smart - pdf (*)',
        '    smart - pytest (+)',
        '',
        '    text - edit (it)',
        '    text - replace (rp)',
        '    text - search (sr)',
        '',
        ]
